10. Write a program to implement the FIFO Page Replacement Algorithms 

import java.util.*;

public class FIFOPageReplacement {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of frames: ");
        int frameLimit = sc.nextInt();

        System.out.print("Enter number of pages: ");
        int totalPages = sc.nextInt();

        int[] pages = new int[totalPages];
        System.out.println("Enter page reference string:");
        for (int i = 0; i < totalPages; i++) pages[i] = sc.nextInt();

        runFIFO(pages, frameLimit);
        sc.close();
    }

    public static void runFIFO(int[] pages, int frameLimit) {
        Queue<Integer> memory = new LinkedList<>();
        int faults = 0;

        System.out.println("\nPage\tFrames\t\tPage Fault");
        for (int page : pages) {
            if (!memory.contains(page)) {
                if (memory.size() == frameLimit) memory.poll();
                memory.add(page);
                faults++;
                System.out.println(page + "\t" + memory + "\tYes");
            } else {
                System.out.println(page + "\t" + memory + "\tNo");
            }
        }
        System.out.println("\nTotal Page Faults: " + faults);
    }
}

11. Write a program to implement the LRU Page Replacement Algorithms 

import java.util.*;

public class LRUPageReplacement {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of frames: ");
        int frames = sc.nextInt();

        System.out.print("Enter the number of pages: ");
        int pagesCount = sc.nextInt();

        int[] pages = new int[pagesCount];
        System.out.println("Enter the reference string: ");
        for (int i = 0; i < pagesCount; i++) pages[i] = sc.nextInt();

        lruPageReplacement(pages, frames);
        sc.close();
    }

    public static void lruPageReplacement(int[] pages, int frames) {
        List<Integer> memory = new ArrayList<>(frames);
        Map<Integer, Integer> lastUsed = new HashMap<>();
        int faults = 0;

        System.out.println("\nPage Reference | Frames | Page Fault");
        for (int i = 0; i < pages.length; i++) {
            int page = pages[i];
            if (!memory.contains(page)) {
                if (memory.size() == frames) {
                    int lruPage = Collections.min(lastUsed.entrySet(), Comparator.comparingInt(Map.Entry::getValue)).getKey();
                    memory.remove((Integer) lruPage);
                    lastUsed.remove(lruPage);
                }
                memory.add(page);
                faults++;
                System.out.println(page + " | " + memory + " | Yes");
            } else {
                System.out.println(page + " | " + memory + " | No");
            }
            lastUsed.put(page, i);
        }
        System.out.println("\nTotal Page Faults: " + faults);
    }
}

 
12. Write a program to implement the Optimal Page Replacement Algorithms 

import java.util.*;

public class OptimalPageReplacement {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of frames: ");
        int frames = sc.nextInt();

        System.out.print("Enter the number of pages: ");
        int pagesCount = sc.nextInt();

        int[] pages = new int[pagesCount];
        System.out.println("Enter the reference string: ");
        for (int i = 0; i < pagesCount; i++) pages[i] = sc.nextInt();

        optimalPageReplacement(pages, frames);
        sc.close();
    }

    public static void optimalPageReplacement(int[] pages, int frames) {
        List<Integer> memory = new ArrayList<>(frames);
        int faults = 0;

        System.out.println("\nPage Reference | Frames | Page Fault");
        for (int i = 0; i < pages.length; i++) {
            int page = pages[i];
            if (!memory.contains(page)) {
                if (memory.size() == frames) {
                    int indexToReplace = findPageToReplace(pages, memory, i + 1);
                    memory.set(indexToReplace, page);
                } else {
                    memory.add(page);
                }
                faults++;
                System.out.println(page + " | " + memory + " | Yes");
            } else {
                System.out.println(page + " | " + memory + " | No");
            }
        }
        System.out.println("\nTotal Page Faults: " + faults);
    }

    private static int findPageToReplace(int[] pages, List<Integer> memory, int startIndex) {
        int farthest = -1, indexToReplace = 0;
        for (int i = 0; i < memory.size(); i++) {
            int page = memory.get(i);
            int nextUse = -1;
            for (int j = startIndex; j < pages.length; j++) {
                if (pages[j] == page) {
                    nextUse = j;
                    break;
                }
            }
            if (nextUse == -1) return i; // Not used again, replace immediately
            if (nextUse > farthest) {
                farthest = nextUse;
                indexToReplace = i;
            }
        }
        return indexToReplace;
    }
}


10. Write a program to implement the FIFO Page Replacement Algorithms 

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class FIFOPageReplacement {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter the number of frames: ");
        int frames = sc.nextInt();
        
        System.out.print("Enter the number of pages: ");
        int pagesCount = sc.nextInt();
        
        int[] pages = new int[pagesCount];
        System.out.println("Enter the reference string: ");
        for (int i = 0; i < pagesCount; i++) {
            pages[i] = sc.nextInt();
        }
        
        fifoPageReplacement(pages, frames);
        sc.close();
    }
    
    public static void fifoPageReplacement(int[] pages, int frames) {
        Queue<Integer> queue = new LinkedList<>();
        int pageFaults = 0;
        
        System.out.println("\nPage Reference | Frames | Page Fault");
        for (int page : pages) {
            if (!queue.contains(page)) {
                if (queue.size() == frames) {
                    queue.poll(); // Remove the oldest page
                }
                queue.add(page);
                pageFaults++;
                System.out.println(page + " | " + queue + " | Yes");
            } else {
                System.out.println(page + " | " + queue + " | No");
            }
        }
        
        System.out.println("\nTotal Page Faults: " + pageFaults);
    }
}

11. Write a program to implement the LRU Page Replacement Algorithms 

import java.util.*;

public class LRUPageReplacement {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter the number of frames: ");
        int frames = sc.nextInt();
        
        System.out.print("Enter the number of pages: ");
        int pagesCount = sc.nextInt();
        
        int[] pages = new int[pagesCount];
        System.out.println("Enter the reference string: ");
        for (int i = 0; i < pagesCount; i++) {
            pages[i] = sc.nextInt();
        }
        
        lruPageReplacement(pages, frames);
        sc.close();
    }
    
    public static void lruPageReplacement(int[] pages, int frames) {
        List<Integer> memory = new ArrayList<>(frames);
        Map<Integer, Integer> pageIndices = new HashMap<>();
        int pageFaults = 0;
        
        System.out.println("\nPage Reference | Frames | Page Fault");
        for (int i = 0; i < pages.length; i++) {
            int page = pages[i];
            if (!memory.contains(page)) {
                if (memory.size() == frames) {
                    int lruPage = Collections.min(pageIndices.entrySet(), Comparator.comparingInt(Map.Entry::getValue)).getKey();
                    memory.remove((Integer) lruPage);
                    pageIndices.remove(lruPage);
                }
                memory.add(page);
                pageFaults++;
                System.out.println(page + " | " + memory + " | Yes");
            } else {
                System.out.println(page + " | " + memory + " | No");
            }
            pageIndices.put(page, i);
        }
        
        System.out.println("\nTotal Page Faults: " + pageFaults);
    }
}

 
12. Write a program to implement the Optimal Page Replacement Algorithms 

import java.util.*;

public class OptimalPageReplacement {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter the number of frames: ");
        int frames = sc.nextInt();
        
        System.out.print("Enter the number of pages: ");
        int pagesCount = sc.nextInt();
        
        int[] pages = new int[pagesCount];
        System.out.println("Enter the reference string: ");
        for (int i = 0; i < pagesCount; i++) {
            pages[i] = sc.nextInt();
        }
        
        optimalPageReplacement(pages, frames);
        sc.close();
    }
    
    public static void optimalPageReplacement(int[] pages, int frames) {
        List<Integer> memory = new ArrayList<>(frames);
        int pageFaults = 0;
        
        System.out.println("\nPage Reference | Frames | Page Fault");
        for (int i = 0; i < pages.length; i++) {
            int page = pages[i];
            if (!memory.contains(page)) {
                if (memory.size() == frames) {
                    int farthest = -1, indexToReplace = -1;
                    for (int j = 0; j < memory.size(); j++) {
                        int nextUse = findNextUse(pages, i + 1, memory.get(j));
                        if (nextUse == -1) {
                            indexToReplace = j;
                            break;
                        }
                        if (nextUse > farthest) {
                            farthest = nextUse;
                            indexToReplace = j;
                        }
                    }
                    memory.set(indexToReplace, page);
                } else {
                    memory.add(page);
                }
                pageFaults++;
                System.out.println(page + " | " + memory + " | Yes");
            } else {
                System.out.println(page + " | " + memory + " | No");
            }
        }
        
        System.out.println("\nTotal Page Faults: " + pageFaults);
    }
    
    private static int findNextUse(int[] pages, int startIndex, int page) {
        for (int i = startIndex; i < pages.length; i++) {
            if (pages[i] == page) {
                return i;
            }
        }
        return -1;
    }
}

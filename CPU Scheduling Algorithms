5.Write a program to implement the FCFS CPU Scheduling Algorithms 

import java.util.Scanner;

public class FCFS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] at = new int[n]; // Arrival Time
        int[] bt = new int[n]; // Burst Time
        int[] ct = new int[n]; // Completion Time
        int[] tat = new int[n]; // Turnaround Time
        int[] wt = new int[n]; // Waiting Time

        System.out.println("Enter Arrival Time and Burst Time for each process:");
        for (int i = 0; i < n; i++) {
            System.out.print("Process " + (i + 1) + ": ");
            at[i] = sc.nextInt();
            bt[i] = sc.nextInt();
        }

        int totalTAT = 0, totalWT = 0;
        for (int i = 0; i < n; i++) {
            if (i == 0)
                ct[i] = at[i] + bt[i];
            else
                ct[i] = Math.max(ct[i - 1], at[i]) + bt[i];

            tat[i] = ct[i] - at[i];
            wt[i] = tat[i] - bt[i];

            totalTAT += tat[i];
            totalWT += wt[i];
        }

        System.out.println("\nProcess\tAT\tBT\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.println((i + 1) + "\t" + at[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + tat[i] + "\t" + wt[i]);
        }

        System.out.printf("\nAverage Turnaround Time: %.2f\n", (double) totalTAT / n);
        System.out.printf("Average Waiting Time: %.2f\n", (double) totalWT / n);
    }
}

6. Write a program to implement the SJF CPU Scheduling Algorithms 

import java.util.Scanner;

public class SJF {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] pid = new int[n];
        int[] at = new int[n]; // Arrival Time
        int[] bt = new int[n]; // Burst Time
        int[] ct = new int[n]; // Completion Time
        int[] tat = new int[n]; // Turnaround Time
        int[] wt = new int[n]; // Waiting Time
        boolean[] done = new boolean[n];

        System.out.println("Enter Arrival Time and Burst Time for each process:");
        for (int i = 0; i < n; i++) {
            pid[i] = i + 1;
            System.out.print("Process " + pid[i] + ": ");
            at[i] = sc.nextInt();
            bt[i] = sc.nextInt();
        }

        int currentTime = 0, completed = 0;
        int totalTAT = 0, totalWT = 0;

        while (completed < n) {
            int idx = -1, minBT = Integer.MAX_VALUE;

            for (int i = 0; i < n; i++) {
                if (!done[i] && at[i] <= currentTime && bt[i] < minBT) {
                    minBT = bt[i];
                    idx = i;
                }
            }

            if (idx == -1) {
                currentTime++;
            } else {
                ct[idx] = currentTime + bt[idx];
                tat[idx] = ct[idx] - at[idx];
                wt[idx] = tat[idx] - bt[idx];
                done[idx] = true;

                totalTAT += tat[idx];
                totalWT += wt[idx];
                currentTime = ct[idx];
                completed++;
            }
        }

        System.out.println("\nPID\tAT\tBT\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t" + at[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + tat[i] + "\t" + wt[i]);
        }

        System.out.printf("\nAverage Turnaround Time: %.2f\n", (double) totalTAT / n);
        System.out.printf("Average Waiting Time: %.2f\n", (double) totalWT / n);

        sc.close();
    }
}


7. Write a program to implement the Priority CPU Scheduling Algorithms 
import java.util.Scanner;

public class PriorityScheduling {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] pid = new int[n], at = new int[n], bt = new int[n], pr = new int[n];
        int[] ct = new int[n], tat = new int[n], wt = new int[n];
        boolean[] done = new boolean[n];

        System.out.println("Enter Arrival Time, Burst Time and Priority (lower = higher priority):");
        for (int i = 0; i < n; i++) {
            pid[i] = i + 1;
            System.out.print("Process " + pid[i] + ": ");
            at[i] = sc.nextInt();
            bt[i] = sc.nextInt();
            pr[i] = sc.nextInt();
        }

        int time = 0, completed = 0, totalTAT = 0, totalWT = 0;

        while (completed < n) {
            int idx = -1, highest = Integer.MAX_VALUE;

            for (int i = 0; i < n; i++) {
                if (!done[i] && at[i] <= time && pr[i] < highest) {
                    highest = pr[i];
                    idx = i;
                }
            }

            if (idx == -1) {
                time++;
            } else {
                ct[idx] = time + bt[idx];
                tat[idx] = ct[idx] - at[idx];
                wt[idx] = tat[idx] - bt[idx];
                time = ct[idx];
                done[idx] = true;

                totalTAT += tat[idx];
                totalWT += wt[idx];
                completed++;
            }
        }

        System.out.println("\nPID\tAT\tBT\tPR\tCT\tTAT\tWT");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t" + at[i] + "\t" + bt[i] + "\t" + pr[i] + "\t" + ct[i] + "\t" + tat[i] + "\t" + wt[i]);
        }

        System.out.printf("\nAverage Turnaround Time: %.2f\n", (double) totalTAT / n);
        System.out.printf("Average Waiting Time: %.2f\n", (double) totalWT / n);

        sc.close();
    }
}

 
8. Write a program to implement the Round-Robin CPU Scheduling Algorithms
import java.util.*;

class Process {
    int pid, at, bt, rt, ct, tat, wt;
}

public class SJF {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        System.out.print("Enter time quantum: ");
        int tq = sc.nextInt();

        Process[] p = new Process[n];
        for (int i = 0; i < n; i++) {
            p[i] = new Process();
            p[i].pid = i + 1;
            System.out.print("Process " + p[i].pid + " (Arrival Time, Burst Time): ");
            p[i].at = sc.nextInt();
            p[i].bt = sc.nextInt();
            p[i].rt = p[i].bt;
        }

        roundRobin(p, tq);
        sc.close();
    }

    public static void roundRobin(Process[] p, int tq) {
        Queue<Process> q = new LinkedList<>();
        int time = 0, completed = 0, n = p.length;
        boolean[] added = new boolean[n];

        while (completed < n) {
            for (int i = 0; i < n; i++) {
                if (!added[i] && p[i].at <= time) {
                    q.add(p[i]);
                    added[i] = true;
                }
            }

            if (q.isEmpty()) {
                time++;
                continue;
            }

            Process curr = q.poll();
            int execTime = Math.min(curr.rt, tq);
            time += execTime;
            curr.rt -= execTime;

            for (int i = 0; i < n; i++) {
                if (!added[i] && p[i].at <= time) {
                    q.add(p[i]);
                    added[i] = true;
                }
            }

            if (curr.rt > 0) q.add(curr);
            else {
                curr.ct = time;
                curr.tat = curr.ct - curr.at;
                curr.wt = curr.tat - curr.bt;
                completed++;
            }
        }

        System.out.println("\nPID\tAT\tBT\tCT\tTAT\tWT");
        for (Process proc : p)
            System.out.println(proc.pid + "\t" + proc.at + "\t" + proc.bt + "\t" + proc.ct + "\t" + proc.tat + "\t" + proc.wt);
    }
}

9. Write a program to implement the producer-consumer problem using semaphores. 

import java.util.concurrent.Semaphore;
import java.util.LinkedList;

class Buffer {
    private final LinkedList<Integer> queue = new LinkedList<>();
    private final int capacity;
    private final Semaphore mutex = new Semaphore(1);
    private final Semaphore empty;
    private final Semaphore full = new Semaphore(0);
    
    public Buffer(int capacity) {
        this.capacity = capacity;
        this.empty = new Semaphore(capacity);
    }

    public void produce(int item) throws InterruptedException {
        empty.acquire();
        mutex.acquire();

        queue.add(item);
        System.out.println("Produced: " + item);

        mutex.release();
        full.release();
    }

    public void consume() throws InterruptedException {
        full.acquire();
        mutex.acquire();

        int item = queue.removeFirst();
        System.out.println("Consumed: " + item);

        mutex.release();
        empty.release();
    }
}

public class Main {
    public static void main(String[] args) {
        Buffer buffer = new Buffer(5);

        Thread producer = new Thread(() -> {
            try {
                for (int i = 1; i <= 10; i++) {
                    buffer.produce(i);
                    Thread.sleep(500);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        Thread consumer = new Thread(() -> {
            try {
                for (int i = 1; i <= 10; i++) {
                    buffer.consume();
                    Thread.sleep(1000);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        producer.start();
        consumer.start();
    }
}

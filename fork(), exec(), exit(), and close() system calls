4.Write a Unix C program that demonstrates the usage of fork(), exec(), exit(), and close() system calls in one execution. 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(EXIT_FAILURE);
    } 
    else if (pid == 0) {
        // Child: close stdout and execute ls -l
        close(STDOUT_FILENO);
        execlp("ls", "ls", "-l", NULL);
        perror("exec failed"); // exec only returns on failure
        exit(EXIT_FAILURE);
    } 
    else {
        // Parent: wait for child to finish
        printf("Parent waiting for child process to finish...\n");
        int status;
        waitpid(pid, &status, 0);

        if (WIFEXITED(status))
            printf("Child exited with status %d\n", WEXITSTATUS(status));
        else
            printf("Child terminated abnormally\n");
    }

    return 0;
}

